@page "/Profile"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager


<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage">X</button>
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="#">Edit My Profile</a>
    </p>
</div>


@if (approved?.Count > 0)
{
    <div>
        <h2>Approved Suggestions</h2>
        <p>These are your suggestions that are currently active</p>

        @foreach (var s in approved)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToString("dd.MM.yyyy")</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@if (archived?.Count > 0)
{
    <div>
        <h2>Archived Suggestions</h2>
        <p>These are your suggestions that were active but did not gain enough traction.</p>

        @foreach (var s in archived)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToString("dd.MM.yyyy")</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@if (pending?.Count > 0)
{
    <div>
        <h2>Pending Suggestions</h2>
        <p>These are your suggestions that have not yet been removed by administrators.</p>

        @foreach (var s in pending)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToString("dd.MM.yyyy")</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@if (rejected?.Count > 0)
{
    <div>
        <h2>Rejected Suggestions</h2>
        <p>These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>

        @foreach (var s in rejected)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToString("dd.MM.yyyy")</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.Description</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions; //base list
    private List<SuggestionModel> approved; //filter list
    private List<SuggestionModel> archived; //filter list
    private List<SuggestionModel> pending; //filter list
    private List<SuggestionModel> rejected; //filter list

    protected async override Task OnInitializedAsync()
    {
        //TODO replace with user lookup
        loggedInUser = await userData.GetUserFromAuthentication("abc-123");

        var results = await suggestionData.GetUsersSuggestions(loggedInUser.Id);

        if (loggedInUser is not null && results is not null)
        {
            //base list
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            // 4 filter lists
            //approved cant be archived and rejected
            approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false && s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            pending = submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
