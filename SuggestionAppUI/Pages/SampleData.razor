@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData


<h3>SampleData</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>

}
else
{
    
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        // if ther is no categories
        if (categories?.Count > 0)
        {
            // just return, because we dont want to add categories second time
            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription = "Fullpaid courses."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Advice on being a developer."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-Depth Tutorial",
                CategoryDescription = "Deep-dive video on how to use a topic."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-min Training",
                CategoryDescription = "A quick \"How do I use this?\" video."
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure where to put this."
            };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {

            return;
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The suggestion was accepted and coresponding item was created."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion is interesting. We are watching to see how much interes is in there."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and it will be released soon."
            };

        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The suggestion is not something that we are going to undertake."
            };

        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
